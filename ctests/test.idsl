//****************************************************************************//
//* Copyright (c) 2016, NVIDIA CORPORATION. All rights reserved.             *//
//*                                                                          *//
//* Redistribution and use in source and binary forms, with or without       *//
//* modification, are permitted provided that the following conditions       *//
//* are met:                                                                 *//
//*  * Redistributions of source code must retain the above copyright        *//
//*    notice, this list of conditions and the following disclaimer.         *//
//*  * Redistributions in binary form must reproduce the above copyright     *//
//*    notice, this list of conditions and the following disclaimer in the   *//
//*    documentation and/or other materials provided with the distribution.  *//
//*  * Neither the name of NVIDIA CORPORATION nor the names of its           *//
//*    contributors may be used to endorse or promote products derived       *//
//*    from this software without specific prior written permission.         *//
//*                                                                          *//
//* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY     *//
//* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE        *//
//* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR       *//
//* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR        *//
//* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,    *//
//* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,      *//
//* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR       *//
//* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY      *//
//* OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT             *//
//* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    *//
//* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     *//
//****************************************************************************//
struct rgb { int8 r ;}
stencil downx_int8(vector#2 int8 X){
  return (X@[(-2,2),(0,1)] +  4 * X@[(-1,2),(0,1)] +  6 * X@[(0,2),(0,1)] + 4 * X@[(1,2),(0,1)] + X@[(2,2),(0,1)])/16;
}
stencil downy_int8(vector#2 int8 Y){
  return ( Y@[(0,1),(-2,2)] + 4 * Y@[(0,1),(-1,2)] + 6 * Y@[(0,1),(0,2)] + 4 * Y@[(0,1),(1,2)] + Y@[(0,1),(2,2)] ) / 16 ;
}
vector downsample_int8(vector#2 int8 X){
  return downy_int8(downx_int8(X));
}
stencil subtract_int8(vector#2 int8 X, vector#2 int8 Y){
  return X-Y;
}
stencil sum2_int8(vector#2 int8 X, vector#2 int8 Y){
  return X + Y;
}
stencil upx_even_int8(vector#2 int8 X){
  return ( X@[-1,0] * 5 + X * 10 + X@[1,0] ) / 16;
}
stencil upx_odd_int8(vector#2 int8 X){
  return (X@[-1,0] + X * 10 +  X@[1,0] * 5)/16;
}
vector upx_int8(vector#2 int8 X){
  return ( @[(0,2),(0,1)] = upx_even_int8(X);
	   @[(1,2),(0,1)] = upx_odd_int8(X); );
}
stencil upy_even_int8(vector#2 int8 X){
  return (X@[0,-1] * 5 + X * 10 + X@[0,1] )/16;
}
stencil upy_odd_int8(vector#2 int8 X){
  return (X@[0,-1] + X * 10 +  X@[0,1] * 5)/16 ;
}
vector upy_int8(vector#2 int8 X){
  return ( @[(0,1),(0,2)] = upy_even_int8(X);
	   @[(0,1),(1,2)] = upy_odd_int8(X); );
}
vector upsample_int8(vector#2 int8 X){
  return upy_int8(upx_int8(X));
}
stencil combine_int8(vector#2 float W1, vector#2 int8 I1, vector#2 float W2, vector#2 int8 I2, vector#2 float W3, vector#2 int8 I3, vector#2 float W4, vector#2 int8 I4 ){
  return  cast<int8>(W1) * I1  + cast<int8>(W2) * I2  + cast<int8>(W3) * I3  + cast<int8>(W4) * I4 ;
}
vector#2 rgb image1[752,500];
image1_red_gpyr<0> = image1.r;

// image1_red_gpyr<1> = downsample_int8(image1_red_gpyr<0>);
// out_red_lpyr<1>  = subtract_int8(image1_red_gpyr<0>,upsample_int8(image1_red_gpyr<1>));

for i = 1..3
     image1_red_gpyr<i> = downsample_int8(image1_red_gpyr<i-1>);
     out_red_lpyr<i> = subtract_int8(image1_red_gpyr<i-1>,upsample_int8(image1_red_gpyr<i>));
endfor

out_red_gpyr<3> = image1_red_gpyr<3>;
for j = 2..0
    out_red_gpyr<j> = sum2_int8(out_red_lpyr<j+1>,upsample_int8(out_red_gpyr<j+1>));
endfor
return out_red_gpyr<0>;

// out_red_gpyr<0> = sum2_int8(out_red_lpyr<1>,upsample_int8(out_red_gpyr<1>));
// return struct rgb(out_red_gpyr<0>);
